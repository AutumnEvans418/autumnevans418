<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://chrisevans9629.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://chrisevans9629.github.io/" rel="alternate" type="text/html" /><updated>2020-07-12T21:06:36+00:00</updated><id>https://chrisevans9629.github.io/feed.xml</id><title type="html">Chris Evans’ Dev Blog</title><subtitle>Welcome to my dev blog!</subtitle><author><name>Chris Evans</name></author><entry><title type="html">DiscordWars</title><link href="https://chrisevans9629.github.io/blog/2020/06/18/discordwars" rel="alternate" type="text/html" title="DiscordWars" /><published>2020-06-18T00:00:00+00:00</published><updated>2020-06-18T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2020/06/18/discordwars</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2020/06/18/discordwars">&lt;p&gt;My brother came up with an idea of a game that could be streamed and played with the people watching the live stream.  We planned it out and expected to get it done in about week, but like all other projects, it ended up taking far longer (more like a month).&lt;/p&gt;

&lt;p&gt;This was mainly due to learning a whole new framework and set of technologies.  I built discord wars using PhaserJS, discord.js, typescript, and webpack.  I have never used these tools before and refactored many times and pulled many hairs out.&lt;/p&gt;

&lt;p&gt;However, once I learned how to use PhaserJS and webpack, everything went pretty smoothly.  I was using Vue on top of the game at first handling every scene change, only to later learn that phaser had lots of those features built in.&lt;/p&gt;

&lt;p&gt;The game is actually really fun and has a lot of features for such a short time.  Definitly give it a try!&lt;/p&gt;

&lt;h2 id=&quot;play-here&quot;&gt;&lt;a href=&quot;/assets/phaser/discordwars/index.html&quot;&gt;Play here&lt;/a&gt;&lt;/h2&gt;</content><author><name>Chris Evans</name></author><category term="game" /><category term="playable" /><category term="phaser" /><category term="web" /><summary type="html">My brother came up with an idea of a game that could be streamed and played with the people watching the live stream. We planned it out and expected to get it done in about week, but like all other projects, it ended up taking far longer (more like a month). This was mainly due to learning a whole new framework and set of technologies. I built discord wars using PhaserJS, discord.js, typescript, and webpack. I have never used these tools before and refactored many times and pulled many hairs out. However, once I learned how to use PhaserJS and webpack, everything went pretty smoothly. I was using Vue on top of the game at first handling every scene change, only to later learn that phaser had lots of those features built in. The game is actually really fun and has a lot of features for such a short time. Definitly give it a try! Play here</summary></entry><entry><title type="html">Building My Website!</title><link href="https://chrisevans9629.github.io/blog/2020/05/03/my-site-launched" rel="alternate" type="text/html" title="Building My Website!" /><published>2020-05-03T00:00:00+00:00</published><updated>2020-05-03T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2020/05/03/my-site-launched</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2020/05/03/my-site-launched">&lt;p&gt;I have worked on a lot of different projects over the years and most of them are difficult to show.  So I created this website so I can showcase some of the work I do.&lt;/p&gt;

&lt;p&gt;As you can tell by the url, this site is hosted by github pages.  It uses jekyll to build the static site and embed the various programs.&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="project" /><category term="update" /><summary type="html">I have worked on a lot of different projects over the years and most of them are difficult to show. So I created this website so I can showcase some of the work I do.</summary></entry><entry><title type="html">Simulating an Outbreak</title><link href="https://chrisevans9629.github.io/blog/2020/05/03/outbreak-simulator" rel="alternate" type="text/html" title="Simulating an Outbreak" /><published>2020-05-03T00:00:00+00:00</published><updated>2020-05-03T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2020/05/03/outbreak-simulator</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2020/05/03/outbreak-simulator">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Try it out below!&lt;/code&gt;&lt;br /&gt;
The spread of the disease is something that has been studied for a long time, and there are a variety of ways to predict what will happen when a population is exposed to a new disease.  One way of modeling these scenerios is the susceptible, infected, recovered (SIR) model.&lt;/p&gt;

&lt;p&gt;The SIR model defines the population as 3 categories.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Susceptible is the number of people who are at risk of the getting infected.  This assumes that someone is not vaccinated and that they cannot get a disease twice.&lt;/li&gt;
  &lt;li&gt;Infected means that someone has the disease and can infect other people.&lt;/li&gt;
  &lt;li&gt;Recovered is the number of people who no longer can infect other people.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the model I have created, I have also added a category called ‘Dead’.  This splits the recovered category.&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Infection chance is how likely one is get infected by another person.&lt;/li&gt;
  &lt;li&gt;Recovery time is how long it takes for a disease to leave the incubation period and the symptom period.&lt;/li&gt;
  &lt;li&gt;Death rate is how many of the infected will die from the symptoms.&lt;/li&gt;
  &lt;li&gt;r0 (R-naught) tells how many people will get infected by one person per day.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try it out!&lt;/h2&gt;
&lt;p&gt;Go ahead and change the variables around and see what you get.  Try changing the dropdown to see pre-defined outbreaks.&lt;/p&gt;
&lt;div class=&quot;break&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.bundle.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;row&quot;&gt;
        &lt;canvas id=&quot;myChart&quot;&gt;&lt;/canvas&gt;
        &lt;div id=&quot;app&quot; class=&quot;ml-2&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col&quot;&gt;
                    &lt;button class=&quot;btn&quot; v-on:click=&quot;calculate&quot;&gt;Calculate&lt;/button&gt;
                &lt;/div&gt;
               
            &lt;/div&gt;

            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col&quot;&gt;
                    &lt;label&gt;Outbreak&lt;/label&gt;
                    &lt;select v-model=&quot;selectedOutbreak&quot; v-on:change=&quot;onchange()&quot;&gt;
                        &lt;option v-for=&quot;option in outbreaks&quot; v-bind:value=&quot;option&quot;&gt;
                            (( option ))
                        &lt;/option&gt;
                    &lt;/select&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row align-items-center&quot;&gt;
                &lt;div class=&quot;col&quot;&gt;
                    &lt;label&gt; Days&lt;/label&gt;
                    &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;1460&quot; v-model=&quot;days&quot; /&gt;
                    &lt;p&gt;((days))&lt;/p&gt;
                &lt;/div&gt;
              
                &lt;div class=&quot;col&quot;&gt;
                    &lt;label&gt;Recovery Time&lt;/label&gt;
                    &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;30&quot; step=&quot;1&quot; v-model=&quot;recoveryTime&quot; /&gt;
                    &lt;p&gt;((recoveryTime)) Days&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row align-items-center&quot;&gt;
                &lt;div class=&quot;col&quot;&gt;
                    &lt;label&gt;Infection Chance&lt;/label&gt;
                    &lt;input type=&quot;range&quot; min=&quot;0.01&quot; max=&quot;1&quot; step=&quot;0.01&quot; v-model=&quot;infectionRate&quot; /&gt;
                    &lt;p&gt;((infectionRate*100))%&lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;col form-group&quot;&gt;
                    &lt;label&gt;Death Rate&lt;/label&gt;
                    &lt;input type=&quot;range&quot; min=&quot;0.000001&quot; max=&quot;1&quot; step=&quot;0.000001&quot; v-model=&quot;deathrate&quot; /&gt;
                    &lt;p&gt;((deathrate*100))%&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
           &lt;div class=&quot;row align-items-center&quot;&gt;
            
            &lt;div class=&quot;col form-group&quot;&gt;
                &lt;label&gt;Infected&lt;/label&gt;
                &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;5000&quot; step=&quot;1&quot; v-model=&quot;infected_start&quot; /&gt;
                &lt;p&gt;((infected_start))&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col form-group&quot;&gt;
                &lt;label&gt;Susceptible&lt;/label&gt;
                &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;5000&quot; step=&quot;1&quot; v-model=&quot;s&quot; /&gt;
                &lt;p&gt;((s))&lt;/p&gt;
            &lt;/div&gt;
           &lt;/div&gt;
           
            
            
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col&quot;&gt;
                    &lt;h2&gt;Results&lt;/h2&gt;
                    &lt;ul&gt;
                        &lt;li&gt;((ts)) people out of ((s)) did not get sick.&lt;/li&gt;
                        &lt;li&gt;((ti)) people are still infected.&lt;/li&gt;
                        &lt;li&gt;((tr)) out of ((s)) people recovered.&lt;/li&gt;
                        &lt;li&gt;((td)) people died.&lt;/li&gt;
                        &lt;li&gt;The r0 value is ((infectionRate * recoveryTime))&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
    var ctx = document.getElementById('myChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'line',
        data: setupData(),
        responsive: true,
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
    function addData(chart, label, data, sus, rec, deaths) {
        chart.data.labels.push(label);
    
        
        chart.data.datasets.forEach((dataset) =&gt; {
            if(dataset.label == &quot;Infected&quot;){
                dataset.data.push(data);
            }
            if(dataset.label == &quot;Susceptible&quot;){
                dataset.data.push(sus);
            }
            if(dataset.label == &quot;Recovery&quot;){
                dataset.data.push(rec);
            }
            if(dataset.label == &quot;Deaths&quot;){
                dataset.data.push(deaths);
            }
        });
        chart.update();
    }
    
    function removeData(chart) {
        chart.data.labels.pop();
        chart.data.datasets.forEach((dataset) =&gt; {
            dataset.data.pop();
        });
        chart.update();
    }
    
    function setupData() {
        return {
            labels: [],
            datasets: [{
                label: 'Infected',
                data: [],
                backgroundColor: '#bb393986',
                borderColor: [
                    'rgba(255, 99, 132, 1)'
                ],
                borderWidth: 1
            },
            {
                label: 'Susceptible',
                data: [],
                backgroundColor: '#c2c5259f'
            },
            {
                label: 'Recovery',
                data: [],
                backgroundColor: '#3939d3ad'
            },
            {
                label: 'Deaths',
                data: [],
                backgroundColor: '#291515bc'
            }]
        };
    }
    
    setupData(myChart);
    &lt;/script&gt;

&lt;script&gt;
    var app = new Vue({
  el: '#app',
  data: {
    message: 'Hello Vue!',
    days: 180,
    infectionRate: 0.5,
    s: 1000,
    infected_start: 1,
    recoveryTime: 14,
    deathrate: 0.01,
    ts: 0,
    ti: 0,
    td: 0,
    tr: 0,
    selectedOutbreak: 'Covid 19',
    outbreaks: ['Covid 19','Measles','Influenza','Ebola','Zombie Virus'],
  },
  delimiters: [&quot;((&quot;,&quot;))&quot;],
  beforeMount(){
     this.onchange();
  },
  methods: {
      onchange: function() {
          if(this.selectedOutbreak == 'Covid 19'){
              this.infectionRate = 0.25;
              this.recoveryTime = 21;
              this.deathrate = 0.1;
              this.days = 360;

          }
          if(this.selectedOutbreak == 'Measles'){
              this.infectionRate = 0.8;
              this.recoveryTime = 21;
              this.deathrate = 0.2;
              this.days = 360;

          }
          if(this.selectedOutbreak == 'Influenza'){
              this.infectionRate = 0.2;
              this.recoveryTime = 14;
              this.deathrate = 0.01;
              this.days = 360;

          }
          if(this.selectedOutbreak == 'Ebola'){
              this.infectionRate = 0.5;
              this.recoveryTime = 30;
              this.deathrate = 0.5;
              this.days = 360;
          }
          if(this.selectedOutbreak == 'Zombie Virus'){
              this.infectionRate = 0.99;
              this.recoveryTime = 360 * 5;
              this.deathrate = 0.0001;
              this.days = 360 * 10;
          }
        this.calculate();

      },
      calculate: function() {
          myChart.data = setupData();
          let s = 1;
          let i = this.infected_start / this.s;
          let b = this.infectionRate;
          let k = 1 / this.recoveryTime;
          let recovered = 0;
          let pop = i + s + recovered;
          let dr = this.deathrate * k;
          let d = 0;

          let increment = Math.max(1,Math.round(this.days / 60));

          for (let index = 0; index &lt; this.days; index++) {
              if(index % increment == 0) {
                addData(myChart,&quot;Day &quot; + index,i * this.s, s * this.s, recovered * this.s, d * this.s);

              }
            //infect rate * pop * current infected;
            let ns = s - (b * s * i);


            let ni = i + (b * s * i - (k * i + dr * i));
            
            let nr = recovered + (k * i - dr * i);

            let nd = d + (dr * i);
            s = ns;
            i = ni;
            recovered = nr;
            d = nd;

            
          }

          this.ts = Math.round(s * this.s);
          this.ti = Math.round(i * this.s);
          this.td = Math.round(d * this.s);
          this.tr = Math.round(recovered * this.s);
      },
      

  }
})
&lt;/script&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology&quot;&gt;Compartmental Models in Epidemiology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.maa.org/press/periodicals/loci/joma/the-sir-model-for-spread-of-disease-the-differential-equation-model&quot;&gt;Model the spread of disease&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Chris Evans</name></author><category term="project" /><category term="vuejs" /><category term="chartjs" /><category term="interactive" /><summary type="html">Try it out below! The spread of the disease is something that has been studied for a long time, and there are a variety of ways to predict what will happen when a population is exposed to a new disease. One way of modeling these scenerios is the susceptible, infected, recovered (SIR) model. The SIR model defines the population as 3 categories. Susceptible is the number of people who are at risk of the getting infected. This assumes that someone is not vaccinated and that they cannot get a disease twice. Infected means that someone has the disease and can infect other people. Recovered is the number of people who no longer can infect other people. In the model I have created, I have also added a category called ‘Dead’. This splits the recovered category. Variables Infection chance is how likely one is get infected by another person. Recovery time is how long it takes for a disease to leave the incubation period and the symptom period. Death rate is how many of the infected will die from the symptoms. r0 (R-naught) tells how many people will get infected by one person per day. Try it out! Go ahead and change the variables around and see what you get. Try changing the dropdown to see pre-defined outbreaks. Calculate Outbreak (( option )) Days ((days)) Recovery Time ((recoveryTime)) Days Infection Chance ((infectionRate*100))% Death Rate ((deathrate*100))% Infected ((infected_start)) Susceptible ((s)) Results ((ts)) people out of ((s)) did not get sick. ((ti)) people are still infected. ((tr)) out of ((s)) people recovered. ((td)) people died. The r0 value is ((infectionRate * recoveryTime)) Resources Compartmental Models in Epidemiology Model the spread of disease</summary></entry><entry><title type="html">Plagueforce</title><link href="https://chrisevans9629.github.io/blog/2020/04/19/plagueforce" rel="alternate" type="text/html" title="Plagueforce" /><published>2020-04-19T00:00:00+00:00</published><updated>2020-04-19T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2020/04/19/plagueforce</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2020/04/19/plagueforce">&lt;p&gt;Since I am spending a lot more time at home these days, I decided to take the time to learn some unity3d.  This is my first full game with unity.  You can play here on this site and see how I made plagueforce.&lt;/p&gt;

&lt;h2 id=&quot;plot&quot;&gt;Plot&lt;/h2&gt;
&lt;p&gt;Our greatest fears have come to life: the world is out of toilet paper. Fortunately, you have some to spare. Put on the mask, get in the plane, and prepare for a long flight. But beware! Infected bats are all over the skies! Shoot the bats with syringes before they touch you, collect toilet paper on your journey, and deliver as much toilet paper as you can!&lt;/p&gt;

&lt;h2 id=&quot;inpsiration&quot;&gt;Inpsiration&lt;/h2&gt;

&lt;p&gt;My goal for this game was to make something that was as simple as possible.  After failing multiple times with various other ideas, I learned quickly that I needed to start small.  I wanted to create something that was unique to play and was based off a single input.&lt;/p&gt;

&lt;p&gt;After tossing some ideas around, I thought of using the flappy bird controllers in a shoot em up style game.  I also was inspired by the current crisis and wanted to make something that could be a time waster while spending time in quarantine.&lt;/p&gt;

&lt;h2 id=&quot;development-process&quot;&gt;Development Process&lt;/h2&gt;

&lt;p&gt;All the of art and music was made by me.  I illustrator to make all of my art and aggressively googled how to animate the characters.&lt;/p&gt;

&lt;p&gt;The music was created using FL studio and the sound effects were created with Bfxr.&lt;/p&gt;

&lt;p&gt;I work as a C# Developer at my job, so the coding was pretty simple to some degree, but it did require some digging into the documentation and watching youtube videos to get the ads to work and other amazing services that unity provides.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, I am really proud of what I accomplished and look forward to my next project.&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="game" /><category term="playable" /><category term="unity" /><category term="android" /><summary type="html">Since I am spending a lot more time at home these days, I decided to take the time to learn some unity3d. This is my first full game with unity. You can play here on this site and see how I made plagueforce. Plot Our greatest fears have come to life: the world is out of toilet paper. Fortunately, you have some to spare. Put on the mask, get in the plane, and prepare for a long flight. But beware! Infected bats are all over the skies! Shoot the bats with syringes before they touch you, collect toilet paper on your journey, and deliver as much toilet paper as you can! Inpsiration My goal for this game was to make something that was as simple as possible. After failing multiple times with various other ideas, I learned quickly that I needed to start small. I wanted to create something that was unique to play and was based off a single input. After tossing some ideas around, I thought of using the flappy bird controllers in a shoot em up style game. I also was inspired by the current crisis and wanted to make something that could be a time waster while spending time in quarantine. Development Process All the of art and music was made by me. I illustrator to make all of my art and aggressively googled how to animate the characters. The music was created using FL studio and the sound effects were created with Bfxr. I work as a C# Developer at my job, so the coding was pretty simple to some degree, but it did require some digging into the documentation and watching youtube videos to get the ads to work and other amazing services that unity provides. Conclusion Overall, I am really proud of what I accomplished and look forward to my next project.</summary></entry><entry><title type="html">Dot Dodge</title><link href="https://chrisevans9629.github.io/blog/2020/03/18/dotdodge" rel="alternate" type="text/html" title="Dot Dodge" /><published>2020-03-18T00:00:00+00:00</published><updated>2020-03-18T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2020/03/18/dotdodge</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2020/03/18/dotdodge">&lt;p&gt;What would you make if you were given 1 hour to make a game?  This is what I came up with:  A simple flappy bird style shoot-em up game with a bloomy retro style.  You can play it here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dotdodge1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This challenged me to finish a game no matter how good it was.  I had to think of something simple that wouldn’t lead to feature creap.  I eventually thought about using only one input and simple physics and collisions.&lt;/p&gt;

&lt;p&gt;I was able to get the game running in just about an hour.  Of course, I went ahead and did some polishing, such as adding a main menu, and a score.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dotdodge2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Building dotdodge later inspired me to build plagueforce, a game based on the same code base with far more features and content.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2020/04/19/plagueforce&quot;&gt;Plagueforce&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="game" /><category term="playable" /><category term="unity" /><category term="android" /><summary type="html">What would you make if you were given 1 hour to make a game? This is what I came up with: A simple flappy bird style shoot-em up game with a bloomy retro style. You can play it here. This challenged me to finish a game no matter how good it was. I had to think of something simple that wouldn’t lead to feature creap. I eventually thought about using only one input and simple physics and collisions. I was able to get the game running in just about an hour. Of course, I went ahead and did some polishing, such as adding a main menu, and a score. Building dotdodge later inspired me to build plagueforce, a game based on the same code base with far more features and content. Plagueforce</summary></entry><entry><title type="html">QuadroPong</title><link href="https://chrisevans9629.github.io/blog/2020/02/22/pong" rel="alternate" type="text/html" title="QuadroPong" /><published>2020-02-22T00:00:00+00:00</published><updated>2020-02-22T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2020/02/22/pong</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2020/02/22/pong">&lt;p&gt;QuadroPong is a local 4 player game that I built with MonoGame.  It has ai players, astroids, bosses, powerups, and more.  I was working on implementing online multiplayer before moving to unity3d.  There are many more features I would like to add, but this game is playable as it is.  See the game in action…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pongboss.gif&quot; alt=&quot;boss&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a lot going on in this scene.  I am honestly not exactly sure how I got to this point, but I feel like it turned into a fun little couch play game.  There was a variety of problems that made the development of this game challenging.&lt;/p&gt;

&lt;h2 id=&quot;powering-up&quot;&gt;Powering Up&lt;/h2&gt;

&lt;p&gt;There are a variety of powerups in this game.  To get the powerup, you had to be the last player to have hit the ball before the ball hits the powerup.  Powerups included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bigger Paddle&lt;/li&gt;
  &lt;li&gt;Tiny Paddle&lt;/li&gt;
  &lt;li&gt;Tiny Ball&lt;/li&gt;
  &lt;li&gt;Stun Paddle (can’t move for 3 seconds)&lt;/li&gt;
  &lt;li&gt;Hold Paddle (hold the ball and relaunch it)&lt;/li&gt;
  &lt;li&gt;Fast Paddle (move the paddle much faster)&lt;/li&gt;
  &lt;li&gt;Fast Ball&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These powerups added much more variety to the game and became something you could aim at other than the player’s goal.&lt;/p&gt;

&lt;h2 id=&quot;getting-physical&quot;&gt;Getting Physical…&lt;/h2&gt;

&lt;p&gt;The first challenge was physics.  MonoGame is a framework for developing games, not an engine.  All the physics had to be implemented by hand, including all the collisions.  One the unique physics in pong is that the further away from the center of the paddle the ball hits, the sharper the angle the ball travels from the paddle.  This is actually really easy to implement when you have only two paddles and two goals.  However, this was much difficult when dealing with the square boundaries on the sides.  If a ball hit the corner, it’s basically guarenteed to score even if the paddle is able to hit it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pongbounce.png&quot; alt=&quot;bounce&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One way to solve this is to just bounce off the wall just like a regular ball would, rather moving away from the center of the object.  This however requires knowing which side of the box was hit and it ended up resulting in balls going through the wall if a frame skipped or something like that.&lt;/p&gt;

&lt;p&gt;A longer paddle may seem like an advantage, but it also means that aiming the ball with the paddle has to be more precise the further away the ball is from the center of the paddle.  This would often lead players into launching the ball into their own goal.&lt;/p&gt;

&lt;h2 id=&quot;queue-the-battle-music&quot;&gt;Queue the Battle Music&lt;/h2&gt;

&lt;p&gt;Honestly I was going to add a little spaceship that would just shoot balls, similar to the arcade game astroids, but instead I ended up with I giant moon that shoots balls at random directions and astroids all over the screen (you can turn these off).  It was really fun to implement, especially the explosion effects when he dies.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, I was really happy with this project and although I probably won’t come back to it anytime soon, I felt like I’ve learned a lot from having to implement physics, animations, collisions, etc… all by hand.  Looking forward to the next adventure.&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="game" /><category term="downloadable" /><category term="monogame" /><summary type="html">QuadroPong is a local 4 player game that I built with MonoGame. It has ai players, astroids, bosses, powerups, and more. I was working on implementing online multiplayer before moving to unity3d. There are many more features I would like to add, but this game is playable as it is. See the game in action… There is a lot going on in this scene. I am honestly not exactly sure how I got to this point, but I feel like it turned into a fun little couch play game. There was a variety of problems that made the development of this game challenging. Powering Up There are a variety of powerups in this game. To get the powerup, you had to be the last player to have hit the ball before the ball hits the powerup. Powerups included: Bigger Paddle Tiny Paddle Tiny Ball Stun Paddle (can’t move for 3 seconds) Hold Paddle (hold the ball and relaunch it) Fast Paddle (move the paddle much faster) Fast Ball These powerups added much more variety to the game and became something you could aim at other than the player’s goal. Getting Physical… The first challenge was physics. MonoGame is a framework for developing games, not an engine. All the physics had to be implemented by hand, including all the collisions. One the unique physics in pong is that the further away from the center of the paddle the ball hits, the sharper the angle the ball travels from the paddle. This is actually really easy to implement when you have only two paddles and two goals. However, this was much difficult when dealing with the square boundaries on the sides. If a ball hit the corner, it’s basically guarenteed to score even if the paddle is able to hit it. One way to solve this is to just bounce off the wall just like a regular ball would, rather moving away from the center of the object. This however requires knowing which side of the box was hit and it ended up resulting in balls going through the wall if a frame skipped or something like that. A longer paddle may seem like an advantage, but it also means that aiming the ball with the paddle has to be more precise the further away the ball is from the center of the paddle. This would often lead players into launching the ball into their own goal. Queue the Battle Music Honestly I was going to add a little spaceship that would just shoot balls, similar to the arcade game astroids, but instead I ended up with I giant moon that shoots balls at random directions and astroids all over the screen (you can turn these off). It was really fun to implement, especially the explosion effects when he dies. Conclusion Overall, I was really happy with this project and although I probably won’t come back to it anytime soon, I felt like I’ve learned a lot from having to implement physics, animations, collisions, etc… all by hand. Looking forward to the next adventure.</summary></entry><entry><title type="html">Winform MVP</title><link href="https://chrisevans9629.github.io/blog/2020/01/24/winform-mvp" rel="alternate" type="text/html" title="Winform MVP" /><published>2020-01-24T00:00:00+00:00</published><updated>2020-01-24T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2020/01/24/winform-mvp</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2020/01/24/winform-mvp">&lt;p&gt;Winforms is a mature framework, with the unfortunate design of being tightly coupled to the view.  This makes winforms really hard to unit test and seperate business logic from the view.  My first attempt in seperating the view was by using bindings and mvvm.  Unforuntately, I was not satisfied with the binding capabilities of winforms.  I ended up going with the model-view-presenter pattern and successfully converted forms to use mvp.  This took a long time, so I eventually wrote a program to generate the starting code for me!&lt;/p&gt;

&lt;p&gt;You can see how it works on my &lt;a href=&quot;https://github.com/chrisevans9629/PresenterPatternGenerator&quot;&gt;github&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="project" /><category term="winforms" /><summary type="html">Winforms is a mature framework, with the unfortunate design of being tightly coupled to the view. This makes winforms really hard to unit test and seperate business logic from the view. My first attempt in seperating the view was by using bindings and mvvm. Unforuntately, I was not satisfied with the binding capabilities of winforms. I ended up going with the model-view-presenter pattern and successfully converted forms to use mvp. This took a long time, so I eventually wrote a program to generate the starting code for me! You can see how it works on my github</summary></entry><entry><title type="html">Building a razor engine for Xamarin.Forms</title><link href="https://chrisevans9629.github.io/blazor/xt/" rel="alternate" type="text/html" title="Building a razor engine for Xamarin.Forms" /><published>2020-01-05T00:00:00+00:00</published><updated>2020-01-05T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blazor/xt</id><content type="html" xml:base="https://chrisevans9629.github.io/blazor/xt/">&lt;p&gt;Xaml is much like html in that they are both markup languages that can become very verbose.  One of the things that has helped improved the expressiveness of html in the .net world is Asp.net’s Razor engine.  Xaml so far doesn’t have anything like the razor engine, so I decided to see what it would take to build something like razor that could be used with any Xaml project, just like how you can use static html with razor.&lt;/p&gt;

&lt;p&gt;Below is from the &lt;a href=&quot;https://github.com/chrisevans9629/Evans.XamlTemplates&quot;&gt;readme&lt;/a&gt;, you can also try it interactively at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Additionally, I really &lt;strong&gt;hate&lt;/strong&gt; writing&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;First Name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding FirstName}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Last Name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding LastName}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Age}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;over and over again&lt;/p&gt;

&lt;p&gt;I’d rather write this:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;local:Entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Caption=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;First Name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding FirstName}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;local:Entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Caption=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Last Name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding LastName}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;local:Entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Caption=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Age&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Age}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can do this by writing this in our Templates.taml file:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;@Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@Caption&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@Text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;        
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate the desired control as seen above&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/xt_example.gif&quot; alt=&quot;example&quot; /&gt;;&lt;/p&gt;

&lt;h2 id=&quot;try-it-out-for-yourself&quot;&gt;Try it out for yourself!&lt;/h2&gt;

&lt;script src=&quot;js/index.js&quot; integrity=&quot;&quot;&gt;&lt;/script&gt;

&lt;app&gt;Loading...&lt;/app&gt;
&lt;p&gt;Built with &amp;lt;3 using Blazor
&lt;script src=&quot;_framework/blazor.webassembly.js&quot; integrity=&quot;&quot;&gt;&lt;/script&gt;
&lt;script defer=&quot;&quot; src=&quot;integrity.js&quot; integrity=&quot;&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="project" /><category term="interactive" /><category term="blazor" /><category term="xamarin" /><summary type="html">Xaml is much like html in that they are both markup languages that can become very verbose. One of the things that has helped improved the expressiveness of html in the .net world is Asp.net’s Razor engine. Xaml so far doesn’t have anything like the razor engine, so I decided to see what it would take to build something like razor that could be used with any Xaml project, just like how you can use static html with razor. Below is from the readme, you can also try it interactively at the bottom of the page. Additionally, I really hate writing &amp;lt;StackLayout&amp;gt; &amp;lt;Label Text=&quot;First Name&quot;/&amp;gt; &amp;lt;Entry Text=&quot;{Binding FirstName}&quot;/&amp;gt; &amp;lt;Label Text=&quot;Last Name&quot;/&amp;gt; &amp;lt;Entry Text=&quot;{Binding LastName}&quot;/&amp;gt; &amp;lt;Label Text=&quot;Age&quot;/&amp;gt; &amp;lt;Entry Text=&quot;{Binding Age}&quot;/&amp;gt; &amp;lt;/StackLayout&amp;gt; over and over again I’d rather write this: &amp;lt;local:Entry Caption=&quot;First Name&quot; Text=&quot;{Binding FirstName}&quot;/&amp;gt; &amp;lt;local:Entry Caption=&quot;Last Name&quot; Text=&quot;{Binding LastName}&quot;/&amp;gt; &amp;lt;local:Entry Caption=&quot;Age&quot; Text=&quot;{Binding Age}&quot;/&amp;gt; We can do this by writing this in our Templates.taml file: @Entry(string Caption, string Text) { &amp;lt;StackLayout&amp;gt; &amp;lt;Label Text=&quot;@Caption&quot;/&amp;gt; &amp;lt;Entry Text=&quot;@Text&quot;/&amp;gt; &amp;lt;/StackLayout&amp;gt; } This will generate the desired control as seen above Here is an example: ; Try it out for yourself! Loading... Built with &amp;lt;3 using Blazor</summary></entry><entry><title type="html">Visual Studio Gradebook</title><link href="https://chrisevans9629.github.io/blog/2019/11/23/vsgradebook" rel="alternate" type="text/html" title="Visual Studio Gradebook" /><published>2019-11-23T00:00:00+00:00</published><updated>2019-11-23T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2019/11/23/vsgradebook</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2019/11/23/vsgradebook">&lt;p&gt;Learning to program is hard.  Dedication is required to master software development.  Students often struggle with the lack of feedback from their code.  How do you know if you are doing it right?  Professors also struggle to grade code.  Grading student’s code requires professors to download it, compile it, run it, and review the source code.  Visual Studio Gradebook solves all these problems by providing a unit test style feedback system for students and publishing of their code right in visual studio.  Professors can view student’s code and see the results without the need to download their project or running it.  It will also show how many tests the student’s code passed.  They can also see if the code was plagarized.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Below is an example from the &lt;a href=&quot;https://github.com/chrisevans9629/VsGradeBook&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tax System (Multiple Inputs Example)
Create a program that takes the price of an item and then the percent of sales tax as inputs in that order. The program should then output the original price, the tax percent, the tax cost, and the price + tax cost.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Inputs&lt;/th&gt;
      &lt;th&gt;Outputs&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10,10&lt;/td&gt;
      &lt;td&gt;$10,10%,$1,$11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20,10&lt;/td&gt;
      &lt;td&gt;$20,10%,$2,$22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;100,15&lt;/td&gt;
      &lt;td&gt;$100,15%,$15,$115&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Enter tax percent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Price: $&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Tax Percent: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Tax Cost: $&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Total Cost: $&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vsgradebook_taxsystemsubmissionview.png&quot; alt=&quot;result&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-work&quot;&gt;How does this work?&lt;/h2&gt;

&lt;p&gt;VS Gradebook uses roslyn analyzers to find all the calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Console&lt;/code&gt; and replaces it with my own class with the same name.  I can then inject the input into the ReadLines and read the output from the WriteLines.  This allows me to provide a percent of passing.&lt;/p&gt;

&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration&lt;/h2&gt;

&lt;p&gt;This was done as an honors project at Pittsburg State University my senior year.  I wanted to create something that is new and useful.&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="project" /><category term="downloadable" /><category term="Visual Studio" /><summary type="html">Learning to program is hard. Dedication is required to master software development. Students often struggle with the lack of feedback from their code. How do you know if you are doing it right? Professors also struggle to grade code. Grading student’s code requires professors to download it, compile it, run it, and review the source code. Visual Studio Gradebook solves all these problems by providing a unit test style feedback system for students and publishing of their code right in visual studio. Professors can view student’s code and see the results without the need to download their project or running it. It will also show how many tests the student’s code passed. They can also see if the code was plagarized. Example Below is an example from the documentation Tax System (Multiple Inputs Example) Create a program that takes the price of an item and then the percent of sales tax as inputs in that order. The program should then output the original price, the tax percent, the tax cost, and the price + tax cost. Inputs Outputs 10,10 $10,10%,$1,$11 20,10 $20,10%,$2,$22 100,15 $100,15%,$15,$115 using System; class MainClass { static void Main() { Console.WriteLine(&quot;Enter price&quot;); var price = double.Parse(Console.ReadLine()); Console.WriteLine(&quot;Enter tax percent&quot;); var tax = double.Parse(Console.ReadLine()); Console.WriteLine($&quot;Price: ${price}&quot;); Console.WriteLine($&quot;Tax Percent: {tax}%&quot;); Console.WriteLine($&quot;Tax Cost: ${tax/100 * price}&quot;); Console.WriteLine($&quot;Total Cost: ${price + (tax/100 * price)}&quot;); } } How does this work? VS Gradebook uses roslyn analyzers to find all the calls to Console and replaces it with my own class with the same name. I can then inject the input into the ReadLines and read the output from the WriteLines. This allows me to provide a percent of passing. Inspiration This was done as an honors project at Pittsburg State University my senior year. I wanted to create something that is new and useful.</summary></entry><entry><title type="html">entrepreneurchute</title><link href="https://chrisevans9629.github.io/blog/2019/10/28/entrepreneurchute" rel="alternate" type="text/html" title="entrepreneurchute" /><published>2019-10-28T00:00:00+00:00</published><updated>2019-10-28T00:00:00+00:00</updated><id>https://chrisevans9629.github.io/blog/2019/10/28/entrepreneurchute</id><content type="html" xml:base="https://chrisevans9629.github.io/blog/2019/10/28/entrepreneurchute">&lt;p&gt;Entrepreneurchute was a solution we created at Pittstate for the annual Kansas City Federal Reserve Code-a-thon in October 2019.  We got first place against 11 other universities by creating an app that connects mentors and entreprenuers together.&lt;/p&gt;

&lt;p&gt;Watch our video below to see what we built.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/jWlpyugmbQA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Below is the dream team.  So glad that I had the chance to work with all these great developers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kcfed.png&quot; alt=&quot;kcfed&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;
&lt;p&gt;You can see the tech we used below to develop this site.  We were able to specialize quite a bit with 3 backend developers and 2 front developers.
&lt;img src=&quot;/assets/images/entre_tech.png&quot; alt=&quot;tech&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/chrisevans9629/entrepreneurchute&quot;&gt;source code here&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris Evans</name></author><category term="project" /><category term="code-a-thon" /><summary type="html">Entrepreneurchute was a solution we created at Pittstate for the annual Kansas City Federal Reserve Code-a-thon in October 2019. We got first place against 11 other universities by creating an app that connects mentors and entreprenuers together. Watch our video below to see what we built. Below is the dream team. So glad that I had the chance to work with all these great developers. Development You can see the tech we used below to develop this site. We were able to specialize quite a bit with 3 backend developers and 2 front developers. You can see the source code here</summary></entry></feed>